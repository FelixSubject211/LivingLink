@startuml

package server {
    package common {
        interface TimeService {
            +currentTimeMillis(): Long
        }
        class TimeDefaultService {
            +currentTimeMillis(): Long
        }
        TimeService <.. TimeDefaultService

        interface UuidFactory {
            +invoke(): String
        }
        class UuidDefaultFactory {
            +invoke(): String
        }
        UuidFactory <.. UuidDefaultFactory
    }

    package auth {
        interface UserStore {
            +addUser(userId: String, username: String, hashedPassword: String): String?
            +getUserByUsername(username: String): User?
            +storeRefreshToken(userId: String, refreshToken: RefreshToken): Boolean
            +getRefreshToken(token: String): RefreshToken?
            +deleteRefreshToken(token: String): Boolean
            +deleteUser(userId: String): Boolean
        }
        class PostgresUserStore {
            +addUser(userId: String, username: String, hashedPassword: String): String?
            +getUserByUsername(username: String): User?
            +storeRefreshToken(userId: String, refreshToken: RefreshToken): Boolean
            +getRefreshToken(token: String): RefreshToken?
            +deleteRefreshToken(token: String): Boolean
            +deleteUser(userId: String): Boolean
        }
        UserStore <|.. PostgresUserStore

        interface PasswordHasherService {
            +hashPassword(password: String): String
            +verifyPassword(password: String, hashedPassword: String): Boolean
        }
        class PasswordHasherDefaultService {
            +hashPassword(password: String): String
            +verifyPassword(password: String, hashedPassword: String): Boolean
        }
        PasswordHasherService <.. PasswordHasherDefaultService

        interface JwtService {
            +verifier: JWTVerifier
            +generateToken(userId: String, username: String): String
            +generateRefreshToken(userId: String, username: String): RefreshToken
        }
        class JwtDefaultService {
            +verifier: JWTVerifier
            +generateToken(userId: String, username: String): String
            +generateRefreshToken(userId: String, username: String): RefreshToken
        }
        JwtService <... JwtDefaultService

        class AuthService {
            +registerUser(request: RegisterRequest): RegisterResponse
            +loginUser(request: LoginRequest): LoginResponse
            +refreshAccessToken(request: RefreshTokenRequest): RefreshTokenResponse
            +logoutUser(request: LogoutRequest): LogoutResponse
            +deleteUser(userId: String): DeleteUserResponse
        }
        AuthService --> UserStore
        AuthService --> PasswordHasherService
        AuthService ---> JwtService

        class AuthRoutes {
            #POST /auth/register
            #POST /auth/login
            #POST /auth/refresh
            #POST /auth/logout
            #DELETE /auth/account [authenticated]
        }
        AuthRoutes --> AuthService
    }

    JwtDefaultService ---> TimeService
    JwtDefaultService ---> UuidFactory
    AuthService ---> TimeService
    AuthService---> UuidFactory
}

@enduml